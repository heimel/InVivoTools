function [sgs] = stochasticgridstim(SGSp, OLDSTIM)

%  NewStim package:  STOCHASTICGRIDSTIM
%
%  THESGS = STOCHASTICGRIDSTIM(PARAMETERS)
%
%  Creates a stochasticgridstim object.  A stochasticgridstim allows one to
%  specify a grid on the screen and to specify a distribution of colors which
%  will occupy the squares on the grid.  The value for each square on the grid
%  is chosen randomly and independently for each square.  One of its most common
%  uses is to create a field of 'snow'.
%
%  PARAMETERS can either be the string 'graphical' (which will prompt the user
%  to enter all of the parameter values), the string 'default' (which will
%  use default parameter values), or a structure.  When using 'graphical', one
%  may also use
%
%  SGS = STOCHASTICGRIDSTIM('graphical',OLDSGS)
%
%  where OLDSGS is a previously created stochasticgridstim object.  This will
%  set the default parameter values to those of OLDSGS.
%
%  If passing a structure, the structure should have the following fields:
%  (dimensions of parameters are given as [M N]; fields are case-sensitive):
%
%  [1x4] rect         - Location of stimulus on background window
%                       [top_x top_y bottom_x bottom_y]
%  [1x1] angle        - Rotation angle, in degrees (counterclockwise is positive)
%                       (this is a new parameter; it is not an error to exclude it)
%  [1x3] BG           - Background color [r g b]
%  [nx3] values       - Colors which may appear on the grid squares
%  [nx1] dist         - Relative probability distribution of each color
%                       (i.e., prob(values(i,:)) = dist(i)/sum(dist) )
%  [1x2] pixSize      - Size of blocks in x, y: [X Y].  If X and Y are less
%                       than one, then it uses that fraction of the total
%                       width and height, respectively.  Note that the blocks
%                       must _exactly_ fill up the stimulus rect.
%  [1x1] N            - Number of frames to make
%  [1x1] fps          - Speed at which to show the frames, in frames per second.
% [35x1] randState    - The random state to use as the seed for generating
%                       the random numbers.  Ex:rand('state').  See 'help rand'.
% [cell] dispprefs    - Sets displayprefs fields, or use {} for default values.
%
%   Questions to vanhoosr@brandeis.edu

NewStimListAdd('stochasticgridstim');

if nargin==0
    sgs = stochasticgridstim('default');
    return
end

default_p = default; % private function
finish = 1;

if nargin==1
    oldstim = [];
else
    oldstim = OLDSTIM;
end

if ischar(SGSp)
    if strcmp(SGSp,'graphical')
        % load parameters graphically, check values
        p = get_graphical_input(oldstim);
        if isempty(p)
            finish = 0;
        else
            SGSp = p;
        end
    elseif strcmp(SGSp,'default')
        SGSp = default_p;
    else
        error('Unknown string input to stochasticgridstim.');
    end
else  % they are just parameters
    [good, err] = verifystochasticgridstim(SGSp);
    if ~good
        error(['Could not create stochasticgridstim: ' err]);
    end
end

if finish
    dp = {'fps', SGSp.fps, 'rect',SGSp.rect, 'frames', 1:SGSp.N, ...
        SGSp.dispprefs{:}};
    s = stimulus(5);
    sgs = class(struct('SGSparams',SGSp),'stochasticgridstim',s);
    sgs.stimulus = setdisplayprefs(sgs.stimulus,displayprefs(dp));
else
    sgs = [];
end

function params = get_graphical_input(oldstim)

if isempty(oldstim)
    rect_str =  '[0 0 100 100]';
    bg_str =    '[128 128 128]';
    values_str ='[255 255 255 ; 128 128 128 ; 0 0 0]';
    dist_str =  '[  1; 8; 1 ]';
    pixSize_str='[50 50]';
    N_str =     '1800';
    fps_str =   '15';
    %rs_str =    'rand(''state'')';
    rs_str =    'rng_twister';
    dp_str =    '{}';
    angle_str = '0';
else
    oldsP = struct(oldstim); SGSparams = oldsP.SGSparams;
    rect_str = mat2str(SGSparams.rect);
    bg_str = mat2str(SGSparams.BG);
    values_str = mat2str(SGSparams.values);
    dist_str = mat2str(SGSparams.dist);
    pixSize_str = mat2str(SGSparams.pixSize);
    N_str = num2str(SGSparams.N);
    fps_str = num2str(SGSparams.fps);
    rs_str = '<copied from previous stim>';
    dp_str = wimpcell2str(SGSparams.dispprefs);
    if isfield(SGSparams,'angle')
        angle_str = num2str(SGSparams.angle);
    else
        angle_str = '0';
    end
end

% create figure

h0 = figure('WindowStyle','Normal','Color',[0.8 0.8 0.8], 'Position',[140   307   488   602]);
settoolbar(h0,'none'); 
set(h0,'MenuBar','none');

shift_y = -30;
shift_y2 = -30;

ok_ctl = uicontrol('Parent',h0, 'Units','points',  ...
    'BackgroundColor',[0.7 0.7 0.7], 'FontWeight','bold', ...
    'Position',[36 22 71 27], 'String','OK', 'Tag','Pushbutton1',...
    'Callback', 'set(gcbo,''userdata'',[1]);uiresume(gcf);', ...
    'userdata',0);
cancel_ctl = uicontrol('Parent',h0, 'Units','points', ...
    'BackgroundColor',[0.7 0.7 0.7], 'FontWeight','bold', ...
    'Position',[173 24 71 27], 'String','Cancel', 'Tag','Pushbutton1', ...
    'Callback', 'set(gcbo,''userdata'',[1]);uiresume(gcf);', ...
    'userdata',0);
uicontrol('Parent',h0, 'Units','points', ...
    'BackgroundColor',[0.7 0.7 0.7], ...
    'FontWeight','bold', 'Position',[304 25 71 27], 'String','Help', ...
    'Tag','Pushbutton1',...
    'Callback', ...
    'textbox(''stochasticgridstim help'',help(''stochasticgridstim''));');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'FontSize',18, ...
    'FontWeight','bold', ...
    'ListboxTop',0, ...
    'Position',[42.26500984251969 436.0980561023622 285.2888164370079 24.97477854330709], ...
    'String','New stochasticgridstim object...', ...
    'Style','text', ...
    'Tag','StaticText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 395.7541830708662 216.1278912401575 19.21136811023622], ...
    'String','[1x4] Rect [top_x top_y bottom_x bottom_y]', ...
    'Style','text', ...
    'Tag','StaticText2');
rect_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[247.8266  399.5965  123.9133   18.2508], ...
    'String',rect_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 395.7541830708662+shift_y2  216.1278912401575 19.21136811023622], ...
    'String','[1x1] angle [degrees rotation, + clockwise]', ...
    'Style','text', ...
    'Tag','StaticText2');
angle_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[247.8266  399.5965+shift_y2  123.9133   18.2508], ...
    'String',angle_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 369.8188361220473+shift_y 216.1278912401575 19.21136811023622], ...
    'String','[1x3] background color [r g b], each in 0..255', ...
    'Style','text', ...
    'Tag','StaticText2');
bg_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[247.8266  374.6217+shift_y  123.9133   18.2508], ...
    'String',bg_str, ...
    'Style','edit', ...
    'Tag','EditText1');
values_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[28.81705216535431 301.6184793307087+shift_y 342.9229207677166 43.2255782480315], ...
    'String',values_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 344.8440575787402+shift_y 343.8834891732284 19.21136811023622], ...
    'String','[nx3] values [r g b; r g b ; ...], each in 0..255', ...
    'Style','text', ...
    'Tag','StaticText2');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 277.6042691929134+shift_y 343.8834891732284 19.21136811023622], ...
    'String','[nx1] dist (relative distribution of each color above)', ...
    'Style','text', ...
    'Tag','StaticText2');
dist_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[28.81705216535431 234.3786909448819+shift_y 342.9229207677166 43.2255782480315], ...
    'String',dist_str, ...
    'Style','edit', ...
    'Tag','EditText1');
pixSize_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[314.1058686023622 209.4039124015748+shift_y 57.63410433070867 22.09307332677166], ...
    'String',pixSize_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 204.6010703740158+shift_y 277.6042691929134 22.09307332677166], ...
    'String','[1x2] pixSize (size of grid squares, [ X Y], or faction if X,Y<1', ...
    'Style','text', ...
    'Tag','StaticText2');
N_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[132.5584399606299 187.3108390748032+shift_y 30.73818897637796 18.25079970472441], ...
    'String',N_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 183.4685654527559+shift_y 99.89911417322836 19.21136811023622], ...
    'String','[1x1] N, num frames', ...
    'Style','text', ...
    'Tag','StaticText2');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[194.0348  183.4686+shift_y  116.2288   19.2114], ...
    'String','[1x1] frames per second', ...
    'Style','text', ...
    'Tag','StaticText2');
fps_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[320.8298474409449 188.271407480315+shift_y 50.91012549212599 18.25079970472441], ...
    'String',fps_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[24.97477854330709 162.3360605314961+shift_y 343.8834891732284 19.21136811023622], ...
    'String','[35x1] randomState: use rand(''state'') or enter a variable name', ...
    'Style','text', ...
    'Tag','StaticText2');
rs_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[28.81705216535431 140.2429872047244+shift_y 342.9229207677166 22.09307332677166], ...
    'String',rs_str, ...
    'Style','edit', ...
    'Tag','EditText1');
dp_ctl = uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[1 1 1], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[28.81705216535431 93.17513533464567+shift_y 342.9229207677166 22.09307332677166], ...
    'String',dp_str, ...
    'Style','edit', ...
    'Tag','EditText1');
uicontrol('Parent',h0, ...
    'Units','points', ...
    'BackgroundColor',[0.8 0.8 0.8], ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position', [24.9748  115.2682+shift_y  343.8835   19.2114], ...
    'String','Set any displayprefs options here: example: {''BGpretime'',1}', ...
    'Style','text', ...
    'Tag','StaticText2');

% check for syntax errors

error_free = 0;

sgsp = [];

while ~error_free
    drawnow;
    uiwait(h0);
    
    if get(cancel_ctl,'userdata')==1
        error_free = 1;
    else % it was OK
        
        rect_str = get(rect_ctl,'String');
        bg_str = get(bg_ctl,'String');
        values_str=get(values_ctl,'String');
        dist_str = get(dist_ctl,'String');
        pixSize_str = get(pixSize_ctl,'String');
        N_str = get(N_ctl,'String');
        fps_str = get(fps_ctl,'String');
        rs_str = get(rs_ctl,'String');
        dp_str = get(dp_ctl,'String');
        angle_str = get(angle_ctl,'string');
        
        so = 1; % syntax_okay;
        try
            rect = eval(rect_str);
        catch
            errordlg('Syntax error in Rect');
            so=0;
        end
        try
            bg = eval(bg_str);
        catch
            errordlg('Syntax error in BG');
            so=0;
        end
        try
            values=eval(values_str);
        catch
            errordlg('Syntax error in values');
            so=0;
        end
        try
            dist = eval(dist_str);
        catch
            errordlg('Syntax error in dist');
            so=0;
        end
        try
            pixSize=eval(pixSize_str);
        catch, errordlg('Syntax error in pixsize');
            so=0;
        end
        try
            N = eval(N_str);
        catch
            errordlg('Syntax error in N');
            so=0;
        end
        try
            fps=eval(fps_str);
        catch
            errordlg('Syntax error in fps');
            so=0;
        end
        try
            angle=eval(angle_str);
        catch
            errordlg('Syntax error in angle');
            so=0;
        end
        if strcmp(rs_str,'<copied from previous stim>')&&~isempty(oldstim)
            randState = SGSparams.randState;
        else
            try
                randState=eval(rs_str);
            catch
                errordlg('Syntax error in randState');
                so=0;
            end
        end
        try
            dp=eval(dp_str);
        catch
            errordlg('Syntax error in displayprefs');
            so=0;
        end
        
        if so
            
            sgsp = struct('rect',rect, 'angle',angle,'BG',bg, 'values', values, 'dist', dist, ...
                'pixSize',pixSize,'N',N,'fps',fps,'randState',randState);
            sgsp.dispprefs = dp;
            
            [good, err] = verifystochasticgridstim(sgsp);
            if ~good, errordlg(['Parameter value invalid: ' err]);
                set(ok_ctl,'userdata',0);
            else
                error_free = 1;
            end
        else
            set(ok_ctl,'userdata',0);
        end
    end
end

if get(ok_ctl,'userdata')==1
    params = sgsp;
else
    params = [];
end
delete(h0);

function str = wimpcell2str(theCell)
%1-dim cells only, only chars and matricies
str = '{  ';
for i=1:length(theCell)
    if ischar(theCell{i})
        str = [str '''' theCell{i} ''', ']; %#ok<AGROW>
    elseif isnumeric(theCell{i})
        str = [str mat2str(theCell{i}) ', ']; %#ok<AGROW>
    end
end
str = [str(1:end-2) '}'];

